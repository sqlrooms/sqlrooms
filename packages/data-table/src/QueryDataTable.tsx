import {escapeId, useExportToCsv, useSql} from '@sqlrooms/duckdb';
import {
  Button,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@sqlrooms/ui';
import {genRandomStr} from '@sqlrooms/utils';
import {PaginationState, SortingState} from '@tanstack/table-core';
import {ArrowDownIcon, DownloadIcon} from 'lucide-react';
import {FC, useMemo, useState} from 'react';
import DataTablePaginated, {
  DataTablePaginatedProps,
} from './DataTablePaginated';
import useArrowDataTable from './useArrowDataTable';

export type QueryDataTableProps = {
  className?: string;
  /** Custom font size for the table e.g. text-xs, text-sm, text-md, text-lg, text-base */
  fontSize?: DataTablePaginatedProps<any>['fontSize'];
  query: string;
  queryKeyComponents?: unknown[];
  customActions?: React.ReactNode;
};

const QueryDataTable: FC<QueryDataTableProps> = ({
  className,
  fontSize = 'text-base',
  query,
  customActions,
}) => {
  const {exportToCsv} = useExportToCsv();
  const [sorting, setSorting] = useState<SortingState>([]);
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize: 100,
  });

  const [isExporting, setIsExporting] = useState(false);

  // Sanitize the query generated by LLM to remove trailing semicolons, comments, and extra spaces
  const sanitizedQuery = useMemo(() => {
    return query
      .trim() // Remove leading/trailing whitespace
      .replace(/;+$/, '') // Remove all trailing semicolons
      .replace(/--.*$/gm, '') // Remove single-line comments
      .replace(/\/\*[\s\S]*?\*\//g, '') // Remove multi-line comments
      .replace(/\s+/g, ' '); // Normalize whitespace to single spaces
  }, [query]);

  const queryResult = useSql({
    query: `SELECT * FROM (
      ${sanitizedQuery}
      ) ${
        sorting.length > 0
          ? `ORDER BY ${sorting
              .map((d) => `${escapeId(d.id)}${d.desc ? ' DESC' : ''}`)
              .join(', ')}`
          : ''
      }
      OFFSET ${pagination.pageIndex * pagination.pageSize}
      LIMIT ${pagination.pageSize}`,
  });
  const countQueryResult = useSql<{count: number}>({
    query: `SELECT COUNT(*)::int AS count FROM (${sanitizedQuery})`,
  });

  const arrowTableData = useArrowDataTable(queryResult.data?.arrowTable);

  const handleExport = async () => {
    if (!query) return;
    try {
      setIsExporting(true);
      await exportToCsv(query, `export-${genRandomStr(5)}.csv`);
    } finally {
      setIsExporting(false);
    }
  };

  if (queryResult.error) {
    return (
      <div className="h-full w-full overflow-auto p-5">
        <pre className="text-xs leading-tight text-red-500">
          {queryResult.error?.message ?? 'Unknown error'}
        </pre>
      </div>
    );
  }

  const numRows = countQueryResult.data
    ? (countQueryResult.data.toArray()[0]?.count ?? 0)
    : undefined;

  const pageCount =
    numRows !== undefined
      ? Math.ceil(numRows / pagination.pageSize)
      : undefined;

  const exportAction = (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="xs" disabled={isExporting}>
          {isExporting ? (
            <div className="border-primary h-4 w-4 animate-spin rounded-full border-2 border-t-transparent" />
          ) : (
            <DownloadIcon className="h-4 w-4" />
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={handleExport}>Export CSV</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );

  return (
    <DataTablePaginated
      {...arrowTableData}
      className={className}
      fontSize={fontSize}
      pageCount={pageCount}
      numRows={numRows}
      isFetching={queryResult.isLoading}
      pagination={pagination}
      onPaginationChange={setPagination}
      sorting={sorting}
      onSortingChange={setSorting}
      customActions={
        <>
          {customActions}
          {exportAction}
        </>
      }
    />
  );
};

export default QueryDataTable;
