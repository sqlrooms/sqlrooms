import {sanitizeQuery, useSql} from '@sqlrooms/duckdb';
import {PaginationState, SortingState} from '@tanstack/table-core';
import {FC, useMemo, useState} from 'react';
import DataTablePaginated, {
  DataTablePaginatedProps,
} from './DataTablePaginated';
import {QueryDataTableActionsMenu} from './QueryDataTableActionsMenu';
import useArrowDataTable from './useArrowDataTable';
import {makePagedQuery} from './utils';

export type QueryDataTableProps = {
  className?: string;
  /** Custom font size for the table e.g. text-xs, text-sm, text-md, text-lg, text-base */
  fontSize?: DataTablePaginatedProps<any>['fontSize'];
  query: string;
  lastRunTime?: number;
  isLoading?: boolean;
  pageSize?: number;
  queryKeyComponents?: unknown[];
  renderActions?: (query: string) => React.ReactNode;
};

const QueryDataTable: FC<QueryDataTableProps> = ({
  className,
  fontSize = 'text-xs',
  query,
  lastRunTime,
  isLoading,
  renderActions = (query) => <QueryDataTableActionsMenu query={query} />,
  pageSize = 100,
}) => {
  const [sorting, setSorting] = useState<SortingState>([]);
  const [pagination, setPagination] = useState<PaginationState>({
    pageIndex: 0,
    pageSize,
  });

  // Sanitize the query generated by LLM to remove trailing semicolons, comments, and extra spaces
  const sanitizedQuery = useMemo(() => sanitizeQuery(query), [query]);
  const pagedQuery = makePagedQuery(sanitizedQuery, sorting, pagination);
  const queryResult = useSql({query: pagedQuery, version: lastRunTime});
  const countQueryResult = useSql<{count: number}>({
    query: `SELECT COUNT(*)::int AS count FROM (${sanitizedQuery})`,
    version: lastRunTime,
  });
  const arrowTableData = useArrowDataTable(queryResult.data?.arrowTable);

  if (queryResult.error) {
    return (
      <div className="h-full w-full overflow-auto p-5">
        <pre className="text-xs leading-tight text-red-500">
          {queryResult.error?.message ?? 'Unknown error'}
        </pre>
      </div>
    );
  }

  const numRows = countQueryResult.data
    ? (countQueryResult.data.toArray()[0]?.count ?? 0)
    : undefined;

  return (
    <DataTablePaginated
      {...arrowTableData}
      className={className}
      fontSize={fontSize}
      numRows={numRows}
      isFetching={isLoading || queryResult.isLoading}
      pagination={pagination}
      onPaginationChange={setPagination}
      sorting={sorting}
      onSortingChange={setSorting}
      footerActions={renderActions ? renderActions(sanitizedQuery) : null}
    />
  );
};

export default QueryDataTable;
