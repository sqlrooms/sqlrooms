name: Sync Examples

on:
  push:
    branches: [main]
    paths:
      - 'examples/**'
      - '.github/workflows/sync-examples.yml'
      - 'lerna.json'

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          path: source

      - name: Clone or init target
        run: |
          # Try to clone the repository
          if git clone --depth 1 https://${{ secrets.EXAMPLES_PAT }}@github.com/sqlrooms/examples.git target; then
            echo "Successfully cloned target repository"
          else
            # If clone fails, initialize a new repository
            mkdir target
            cd target
            git init
            git remote add origin https://${{ secrets.EXAMPLES_PAT }}@github.com/sqlrooms/examples.git
            echo "# SQLRooms Examples" > README.md
            git add README.md
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Initial commit"
            git branch -M main
            git push -u origin main
            cd ..
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Sync examples
        run: |
          # Copy examples directory
          rm -rf target/* !target/.git
          cp -r source/examples/* target/

          # Copy examples documentation as README.md
          cp source/docs/examples.md target/README.md
          # Remove only the frontmatter from README
          sed -i.bak '1{/---/{:a N;/\n---/!ba};d}' target/README.md
          rm target/README.md.bak

          # Get version from lerna.json
          VERSION=$(jq -r '.version' source/lerna.json)

          # Update package.json files
          find target -name "package.json" -type f | while read -r file; do
            # Replace all "@sqlrooms/*": "workspace:*" with "@sqlrooms/*": "$VERSION"
            jq --arg version "$VERSION" \
              '(.dependencies | with_entries(
                if .key | startswith("@sqlrooms/")
                then .value = $version
                else .
                end
              )) as $deps
              | .dependencies = $deps' "$file" > temp.json
            mv temp.json "$file"
          done

          # Update Tailwind config files
          find target -name "tailwind.config.ts" -type f | while read -r file; do
            # Replace content between template markers with node_modules path
            sed -i.bak '
              /\/\/ @sqlrooms-packages-content-start/,/\/\/ @sqlrooms-packages-content-end/{
                /\/\/ @sqlrooms-packages-content-start/b
                /\/\/ @sqlrooms-packages-content-end/b
                c\    '"'"'./node_modules/@sqlrooms/**/dist/**/*.js'"'"',
              }
            ' "$file"
            rm "${file}.bak"
          done

          # Setup git config
          cd target
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit and push changes
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Sync examples from main repo (${GITHUB_SHA})"
            git push
          fi
